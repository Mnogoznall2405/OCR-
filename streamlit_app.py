import streamlit as st
import pandas as pd
import numpy as np
import io
import os
import json
import time
import base64
import requests
from PIL import Image
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
load_dotenv()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CACHE_DIR = Path('cache')
HISTORY_DIR = Path('history')
STATS_FILE = Path('stats.json')

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
CACHE_DIR.mkdir(exist_ok=True)
HISTORY_DIR.mkdir(exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="OCR –∏ –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞",
    page_icon="üìù",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ Streamlit secrets
def get_api_key():
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_key = os.getenv("OCR_API_KEY")
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º Streamlit secrets
    if not api_key and hasattr(st, "secrets"):
        api_key = st.secrets.get("OCR_API_KEY")
    
    return api_key

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
if 'OCR_API_KEY' not in st.session_state:
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    api_key = get_api_key()
    if api_key:
        st.session_state.OCR_API_KEY = api_key
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
        st.session_state.OCR_API_KEY = None

OCR_SPACE_URL = 'https://api.ocr.space/parse/image'

# –°–ª–æ–≤–∞—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
SUPPORTED_LANGUAGES = {
    'en': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
    'ru': '–†—É—Å—Å–∫–∏–π',
    'de': '–ù–µ–º–µ—Ü–∫–∏–π',
    'fr': '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π',
    'es': '–ò—Å–ø–∞–Ω—Å–∫–∏–π',
    'it': '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π',
    'pt': '–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π',
    'nl': '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—Å–∫–∏–π',
    'pl': '–ü–æ–ª—å—Å–∫–∏–π',
    'uk': '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π',
    'ja': '–Ø–ø–æ–Ω—Å–∫–∏–π',
    'ko': '–ö–æ—Ä–µ–π—Å–∫–∏–π',
    'zh': '–ö–∏—Ç–∞–π—Å–∫–∏–π',
    'ar': '–ê—Ä–∞–±—Å–∫–∏–π'
}

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —è–∑—ã–∫–æ–≤ –¥–ª—è OCR.space
OCR_SPACE_LANGUAGES = {
    'en': 'eng',
    'ru': 'rus',
    'de': 'ger',
    'fr': 'fre',
    'es': 'spa',
    'it': 'ita',
    'pt': 'por',
    'nl': 'dut',
    'pl': 'pol',
    'uk': 'ukr',
    'ja': 'jpn',
    'ko': 'kor',
    'zh': 'chi_sim',
    'ar': 'ara'
}

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
def translate_text(text, source_lang='auto', target_lang='en'):
    try:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
        if any(char in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø' for char in text):
            source_lang = 'ru'
            target_lang = 'en'
        else:
            source_lang = 'en'
            target_lang = 'ru'
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        url = "https://translate.googleapis.com/translate_a/single"
        params = {
            "client": "gtx",
            "sl": source_lang,
            "tl": target_lang,
            "dt": "t",
            "q": text
        }
        
        response = requests.get(url, params=params)
        if response.status_code == 200:
            result = response.json()
            translated_text = ''.join([sentence[0] for sentence in result[0]])
            return translated_text
        else:
            return f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {response.status_code}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}"

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é OCR.space API
def ocr_space_recognize(image_data, language='auto', enhance_contrast=False, remove_noise=False):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∫–ª—é—á —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not st.session_state.OCR_API_KEY:
            raise Exception("API –∫–ª—é—á OCR.space –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        file_type = 'png'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é PNG
        if image_data.startswith(b'\xFF\xD8\xFF'):
            file_type = 'jpg'
        elif image_data.startswith(b'%PDF'):
            file_type = 'pdf'
        
        # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64 —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
        base64_image = f"data:image/{file_type};base64,{base64.b64encode(image_data).decode('utf-8')}"
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ (OCR.space –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        ocr_space_lang = 'eng' if language == 'en' else 'auto'
        
        payload = {
            'base64Image': base64_image,
            'language': ocr_space_lang,
            'isOverlayRequired': False,
            'OCREngine': 2,  # 2 - –ª—É—á—à–∏–π –¥–≤–∏–∂–æ–∫
            'filetype': file_type.upper(),
            'detectOrientation': True,
            'scale': True,
            'isCreateSearchablePdf': False,
            'isSearchablePdfHideTextLayer': False,
            'isTable': False
        }
        
        headers = {
            'apikey': st.session_state.OCR_API_KEY,
            'Content-Type': 'application/x-www-form-urlencoded'
        }
        
        response = requests.post(OCR_SPACE_URL, data=payload, headers=headers, timeout=60)
        
        if response.status_code == 401 or response.status_code == 403:
            # –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á
            st.session_state.OCR_API_KEY = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª—é—á
            raise Exception("–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á OCR.space. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∫–ª—é—á.")
            
        elif response.status_code != 200:
            raise Exception(f"–û—à–∏–±–∫–∞ API OCR.space: {response.text}")
            
        result = response.json()
        if result.get('IsErroredOnProcessing'):
            error_msg = result.get('ErrorMessage', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ OCR')
            if "Unauthorized request" in error_msg:
                st.session_state.OCR_API_KEY = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª—é—á
                raise Exception("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π API –∫–ª—é—á OCR.space")
            raise Exception(error_msg)
            
        text = result['ParsedResults'][0]['ParsedText']
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫, –Ω–æ OCR.space –µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é
        # –ü–æ—ç—Ç–æ–º—É –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        detected_language = None
        
        return text.strip(), detected_language
        
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {str(e)}")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–µ–º
def get_cache_key(image_data: bytes) -> str:
    import hashlib
    return hashlib.md5(image_data).hexdigest()

def save_to_cache(image_data: bytes, result: dict):
    cache_key = get_cache_key(image_data)
    cache_file = CACHE_DIR / f"{cache_key}.json"
    with open(cache_file, 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=2)

def get_from_cache(image_data: bytes) -> dict:
    cache_key = get_cache_key(image_data)
    cache_file = CACHE_DIR / f"{cache_key}.json"
    if cache_file.exists():
        with open(cache_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    return None

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
def update_stats(success: bool, file_size: int):
    if not STATS_FILE.exists():
        stats = {
            'total_processed': 0,
            'total_success': 0,
            'total_failed': 0,
            'total_size': 0,
            'last_processed': None
        }
    else:
        with open(STATS_FILE, 'r', encoding='utf-8') as f:
            stats = json.load(f)
    
    stats['total_processed'] += 1
    if success:
        stats['total_success'] += 1
    else:
        stats['total_failed'] += 1
    stats['total_size'] += file_size
    stats['last_processed'] = time.strftime("%Y-%m-%d %H:%M:%S")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    with open(STATS_FILE, 'w', encoding='utf-8') as f:
        json.dump(stats, f, ensure_ascii=False, indent=2)
    
    return stats

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
def is_allowed_file(filename: str) -> bool:
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in {'png', 'jpg', 'jpeg', 'pdf'}

def check_file_size(file_data: bytes) -> bool:
    # –ò–∑–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å 10 –ú–ë –¥–æ 1 –ú–ë
    return len(file_data) <= 1 * 1024 * 1024  # 1MB

def optimize_image(image_data: bytes) -> bytes:
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª PDF
        if image_data.startswith(b'%PDF'):
            # –î–ª—è PDF –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            return image_data
            
        img = Image.open(io.BytesIO(image_data))
        
        # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
        if img.size[0] > 2000 or img.size[1] > 2000:
            img.thumbnail((2000, 2000), Image.Resampling.LANCZOS)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º RGBA –≤ RGB, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if img.mode == 'RGBA':
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ RGB –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º
            rgb_img = Image.new('RGB', img.size, (255, 255, 255))
            # –ö–æ–º–ø–æ–∑–∏—Ü–∏—è —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é –ø–æ–≤–µ—Ä—Ö –±–µ–ª–æ–≥–æ —Ñ–æ–Ω–∞
            rgb_img.paste(img, mask=img.split()[3])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª –∫–∞–∫ –º–∞—Å–∫—É
            img = rgb_img
        elif img.mode != 'RGB':
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —Ä–µ–∂–∏–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'P' –∏–ª–∏ 'L') –≤ RGB
            img = img.convert('RGB')
            
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPEG –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        output = io.BytesIO()
        img.save(output, format='JPEG', quality=85)
        return output.getvalue()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return image_data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def process_image(image_data: bytes, settings: dict) -> dict:
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if settings.get('use_cache', True):
            cached_result = get_from_cache(image_data)
            if cached_result:
                return cached_result
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if settings.get('optimize', True):
            image_data = optimize_image(image_data)
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API
        text, _ = ocr_space_recognize(
            image_data, 
            language='auto',  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
            enhance_contrast=settings.get('enhance_contrast', False),
            remove_noise=settings.get('remove_noise', False)
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        detected_language = 'en'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        
        # –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —è–∑—ã–∫ —Ä—É—Å—Å–∫–∏–π
        if any(char in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø' for char in text):
            detected_language = 'ru'
            
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ –∏ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        cyrillic_chars = sum(1 for char in text if char in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø')
        latin_chars = sum(1 for char in text if 'a' <= char.lower() <= 'z')
        
        # –ï—Å–ª–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –±–æ–ª—å—à–µ, —á–µ–º –ª–∞—Ç–∏–Ω–∏—Ü—ã - —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
        if cyrillic_chars > latin_chars:
            detected_language = 'ru'
        
        result = {
            'text': text,
            'processing_time': f'{time.time() - settings.get("start_time", time.time()):.2f} —Å–µ–∫—É–Ω–¥',
            'language': SUPPORTED_LANGUAGES.get(detected_language, '–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ'),
            'detected_language': detected_language
        }
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if settings.get('use_cache', True):
            save_to_cache(image_data, result)
                
        return result
    except Exception as e:
        return {'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}'}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
def save_to_history(image_data: bytes, text: str, language: str, processing_time: str, translated_text=None, target_lang=None):
    timestamp = time.strftime("%Y%m%d-%H%M%S")
    history_file = HISTORY_DIR / f"{timestamp}.json"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_file = HISTORY_DIR / f"{timestamp}.jpg"
    try:
        if not image_data.startswith(b'%PDF'):
            img = Image.open(io.BytesIO(image_data))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º RGBA –≤ RGB, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            if img.mode == 'RGBA':
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ RGB –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º
                rgb_img = Image.new('RGB', img.size, (255, 255, 255))
                # –ö–æ–º–ø–æ–∑–∏—Ü–∏—è —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é –ø–æ–≤–µ—Ä—Ö –±–µ–ª–æ–≥–æ —Ñ–æ–Ω–∞
                rgb_img.paste(img, mask=img.split()[3])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª –∫–∞–∫ –º–∞—Å–∫—É
                img = rgb_img
            elif img.mode != 'RGB':
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —Ä–µ–∂–∏–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'P' –∏–ª–∏ 'L') –≤ RGB
                img = img.convert('RGB')
                
            img.save(image_file, format='JPEG', quality=85)
        else:
            # –î–ª—è PDF —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            with open(HISTORY_DIR / f"{timestamp}.pdf", 'wb') as f:
                f.write(image_data)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    history_data = {
        'timestamp': timestamp,
        'text': text,
        'language': language,
        'processing_time': processing_time
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–≤–æ–¥–µ, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω
    if translated_text and target_lang:
        history_data['translated_text'] = translated_text
        history_data['target_language'] = target_lang
    
    with open(history_file, 'w', encoding='utf-8') as f:
        json.dump(history_data, f, ensure_ascii=False, indent=2)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
@st.cache_data
def load_history():
    history = []
    for history_file in sorted(HISTORY_DIR.glob('*.json'), reverse=True):
        try:
            with open(history_file, 'r', encoding='utf-8') as f:
                history_data = json.load(f)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                timestamp = history_data.get('timestamp', '')
                image_file = HISTORY_DIR / f"{timestamp}.jpg"
                pdf_file = HISTORY_DIR / f"{timestamp}.pdf"
                
                if image_file.exists():
                    history_data['image_path'] = str(image_file)
                elif pdf_file.exists():
                    history_data['pdf_path'] = str(pdf_file)
                
                history.append(history_data)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
    return history

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@st.cache_data
def load_stats():
    if STATS_FILE.exists():
        with open(STATS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {
        'total_processed': 0,
        'total_success': 0,
        'total_failed': 0,
        'total_size': 0,
        'last_processed': None
    }

# –°–ª–æ–≤–∞—Ä—å —è–∑—ã–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
TRANSLATION_LANGUAGES = {
    'en': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
    'ru': '–†—É—Å—Å–∫–∏–π',
    'de': '–ù–µ–º–µ—Ü–∫–∏–π',
    'fr': '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π',
    'es': '–ò—Å–ø–∞–Ω—Å–∫–∏–π',
    'it': '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π',
    'zh': '–ö–∏—Ç–∞–π—Å–∫–∏–π',
    'ja': '–Ø–ø–æ–Ω—Å–∫–∏–π',
    'ko': '–ö–æ—Ä–µ–π—Å–∫–∏–π',
    'ar': '–ê—Ä–∞–±—Å–∫–∏–π'
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –≤ TXT
def export_to_txt(text: str) -> str:
    timestamp = time.strftime("%Y%m%d-%H%M%S")
    export_file = f"export_{timestamp}.txt"
    
    with open(export_file, 'w', encoding='utf-8') as f:
        f.write(text)
    
    return export_file

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è CSS-—Å—Ç–∏–ª–µ–π
def apply_custom_css():
    st.markdown("""
    <style>
    /* –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏ —Å—Ç–∏–ª–∏ */
    :root {
        --primary-color: #4361ee;
        --secondary-color: #3f37c9;
        --accent-color: #4cc9f0;
        --text-color: #333;
        --light-bg: #f8f9fa;
        --dark-bg: #212529;
        --success-color: #4ade80;
        --warning-color: #fbbf24;
        --error-color: #f87171;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ */
    h1, h2, h3 {
        color: var(--primary-color);
        font-weight: 600;
    }
    
    h1 {
        border-bottom: 2px solid var(--primary-color);
        padding-bottom: 0.5rem;
        margin-bottom: 1.5rem;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ */
    .result-container {
        background-color: var(--light-bg);
        padding: 1.2rem;
        border-radius: 8px;
        border-left: 4px solid var(--primary-color);
        margin-top: 1.5rem;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    }
    
    .translated-container {
        background-color: #e6f3ff;
        padding: 1.2rem;
        border-radius: 8px;
        border-left: 4px solid var(--accent-color);
        margin-top: 1rem;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    }
    
    /* –£–ª—É—á—à–µ–Ω–∏–µ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏ textarea */
    .stTextArea textarea {
        border-radius: 6px;
        border: 1px solid #ccc;
        font-size: 1rem;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */
    .preview-container {
        padding: 1rem;
        border: 1px dashed #ccc;
        border-radius: 8px;
        text-align: center;
    }
    
    .preview-image {
        max-height: 300px;
        width: auto;
        margin: 0 auto;
        border-radius: 6px;
    }
    
    /* –£–ª—É—á—à–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ */
    .css-1l4w6pd {
        background-color: #f8f9fa;
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫ */
    .stButton button {
        border-radius: 6px;
        font-weight: 500;
        transition: all 0.2s ease;
    }
    
    .stButton button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */
    div[data-testid="stNotification"] {
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.1);
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏ */
    .stSpinner svg {
        animation: spin 1s linear infinite;
    }
    
    /* –û—Ç–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ */
    .stSpinner p, .stSpinner span, .stSpinner div:not([role="progressbar"]) {
        animation: none !important;
        transform: none !important;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ */
    .stTabs [data-baseweb="tab-list"] {
        gap: 2rem;
    }
    
    .stTabs [data-baseweb="tab"] {
        border-radius: 4px 4px 0 0;
        padding: 0.5rem 1rem;
        font-weight: 500;
    }
    
    .stTabs [aria-selected="true"] {
        background-color: var(--primary-color);
        color: white;
    }
    
    /* –£–ª—É—á—à–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ */
    .card {
        padding: 1.5rem;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.08);
        margin-bottom: 1rem;
        transition: all 0.3s ease;
    }
    
    .card:hover {
        transform: translateY(-4px);
        box-shadow: 0 6px 12px rgba(0,0,0,0.1);
    }
    </style>
    """, unsafe_allow_html=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def analyze_text(text: str) -> dict:
    if not text:
        return {
            "chars_count": 0,
            "words_count": 0,
            "lines_count": 0,
            "paragraphs_count": 0,
            "letters_count": 0,
            "digits_count": 0,
            "spaces_count": 0,
            "punctuation_count": 0,
            "common_words": []
        }
    
    import re
    import string
    from collections import Counter
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
    chars_count = len(text)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    lines = text.split('\n')
    lines_count = len(lines)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–±–∑–∞—Ü–µ–≤ (–Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏)
    paragraphs = [p for p in re.split(r'\n\s*\n', text) if p.strip()]
    paragraphs_count = len(paragraphs)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
    words = re.findall(r'\b\w+\b', text.lower())
    words_count = len(words)
    
    # –ü–æ–¥—Å—á–µ—Ç –±—É–∫–≤, —Ü–∏—Ñ—Ä, –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–Ω–∞–∫–æ–≤ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
    letters_count = sum(c.isalpha() for c in text)
    digits_count = sum(c.isdigit() for c in text)
    spaces_count = sum(c.isspace() for c in text)
    punctuation_count = sum(c in string.punctuation for c in text)
    
    # –ù–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (–∏—Å–∫–ª—é—á–∞—è —Å—Ç–æ–ø-—Å–ª–æ–≤–∞)
    stop_words = set(['–∏', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '–Ω–µ', '–æ—Ç', '–∑–∞', '–∫', '–∞', 'the', 'and', 'of', 'to', 'in', 'a', 'is', 'that', 'for', 'on', 'with', 'by', 'at', 'as'])
    filtered_words = [word for word in words if word not in stop_words and len(word) > 2]
    word_counts = Counter(filtered_words)
    common_words = word_counts.most_common(5)  # 5 —Å–∞–º—ã—Ö —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    
    return {
        "chars_count": chars_count,
        "words_count": words_count,
        "lines_count": lines_count,
        "paragraphs_count": paragraphs_count,
        "letters_count": letters_count,
        "digits_count": digits_count,
        "spaces_count": spaces_count,
        "punctuation_count": punctuation_count,
        "common_words": common_words
    }

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    # –ü—Ä–∏–º–µ–Ω—è–µ–º CSS-—Å—Ç–∏–ª–∏
    apply_custom_css()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if st.session_state.OCR_API_KEY is None:
        st.title("üìù OCR –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏ –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞")
        
        st.error("‚ö†Ô∏è API –∫–ª—é—á –¥–ª—è OCR.space –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
        
        with st.form("api_key_form"):
            st.write("### –í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á OCR.space")
            api_key = st.text_input("API –∫–ª—é—á", type="password", 
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª—é—á API...",
                                    help="–ö–ª—é—á –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ OCR.space")
            submitted = st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", use_container_width=True)
            
            if submitted and api_key:
                st.session_state.OCR_API_KEY = api_key
                st.success("‚úÖ API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏!")
                time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                st.rerun()
        
        st.markdown("""
        <div class="card">
            <h3>üìã –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á</h3>
            <ol>
                <li><b>–ß–µ—Ä–µ–∑ .env —Ñ–∞–π–ª</b>:
                    <ul>
                        <li>–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª <code>.env</code> –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞</li>
                        <li>–î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É: <code>OCR_API_KEY=–≤–∞—à_–∫–ª—é—á_api</code></li>
                    </ul>
                </li>
                <br>
                <li><b>–ß–µ—Ä–µ–∑ Streamlit Secrets</b> (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –¥–µ–ø–ª–æ—è):
                    <ul>
                        <li>–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª <code>.streamlit/secrets.toml</code></li>
                        <li>–î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É: <code>OCR_API_KEY="–≤–∞—à_–∫–ª—é—á_api"</code></li>
                    </ul>
                </li>
            </ol>
            <p>–ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –º–æ–∂–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ <a href="https://ocr.space/ocrapi" target="_blank">OCR.space</a> (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)</p>
        </div>
        """, unsafe_allow_html=True)
        
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –∫–ª—é—á–∞
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.title("üìù OCR –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏ –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞")
    st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ PDF —Ñ–∞–π–ª –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞.")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
        st.subheader("üî§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ")
        st.info("–Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        with st.expander("üõ†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
            optimize = st.checkbox("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", value=True, 
                                  help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            use_cache = st.checkbox("üì¶ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à", value=True,
                                   help="–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
            enhance_contrast = st.checkbox("üîé –£–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å", value=False,
                                         help="–ú–æ–∂–µ—Ç –ø–æ–º–æ—á—å –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –Ω–∏–∑–∫–æ–∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            remove_noise = st.checkbox("üßπ –£–¥–∞–ª–∏—Ç—å —à—É–º", value=False,
                                     help="–ú–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞—à—É–º–ª–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        st.divider()
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats = load_stats()
        
        col1, col2 = st.columns(2)
        col1.metric("–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", stats['total_processed'])
        col2.metric("–£—Å–ø–µ—à–Ω–æ", stats['total_success'])
        
        col1, col2 = st.columns(2)
        col1.metric("–û—à–∏–±–æ–∫", stats['total_failed'])
        col2.metric("–†–∞–∑–º–µ—Ä (–ú–ë)", round(stats['total_size'] / (1024 * 1024), 2))
        
        if stats['last_processed']:
            st.caption(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {stats['last_processed']}")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    tab1, tab2 = st.tabs(["üì∏ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ", "üìú –ò—Å—Ç–æ—Ä–∏—è"])
    
    # –í–∫–ª–∞–¥–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    with tab1:
        # –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        col_upload, col_preview = st.columns([2, 1])
        
        with col_upload:
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
            uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ PDF —Ñ–∞–π–ª", 
                                        type=['png', 'jpg', 'jpeg', 'pdf'],
                                        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã PNG, JPG –∏ PDF",
                                        label_visibility="collapsed",
                                        accept_multiple_files=False)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            st.caption("–õ–∏–º–∏—Ç 1–ú–ë –Ω–∞ —Ñ–∞–π–ª ‚Ä¢ PNG, JPG, JPEG, PDF")
            
            if uploaded_file is not None:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                file_data = uploaded_file.getvalue()
                if not check_file_size(file_data):
                    st.error("‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 1 –ú–ë.")
                elif st.button("üîç –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç", type="primary", use_container_width=True):
                    with st.spinner("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
                        start_time = time.time()
                        
                        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                        settings = {
                            'language': 'en',
                            'optimize': optimize,
                            'use_cache': use_cache,
                            'enhance_contrast': enhance_contrast,
                            'remove_noise': remove_noise,
                            'start_time': start_time  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        }
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        result = process_image(file_data, settings)
                        
                        # –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        processing_time = f"{time.time() - start_time:.2f} —Å–µ–∫."
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        success = 'error' not in result
                        update_stats(success, len(file_data))
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        if success:
                            original_text = result['text']
                            detected_language = result.get('detected_language', 'auto')
                            
                            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –≤—Å–µ–≥–¥–∞
                            translated_text = None
                            target_language = None
                            
                            with st.spinner("üåê –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞..."):
                                # –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ - –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –∏–Ω–∞—á–µ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
                                if any(char in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø' for char in original_text):
                                    source_lang = 'ru'
                                    target_language = 'en'
                                else:
                                    source_lang = 'en'
                                    target_language = 'ru'
                                
                                if original_text.strip():
                                    translated_text = translate_text(original_text, source_lang, target_language)
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                            save_to_history(
                                file_data, 
                                original_text, 
                                detected_language, 
                                processing_time,
                                translated_text,
                                target_language
                            )
                            
                            st.success(f"‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∑–∞ {processing_time}")
                            
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                            source_lang_name = SUPPORTED_LANGUAGES.get(detected_language, "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π")
                            st.markdown(f"### üìÑ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ({source_lang_name})")
                            st.markdown('<div class="result-container">', unsafe_allow_html=True)
                            st.text_area("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", original_text, height=200, label_visibility="collapsed")
                            st.markdown('</div>', unsafe_allow_html=True)
                            
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                            if translated_text:
                                target_lang_name = TRANSLATION_LANGUAGES.get(target_language, "")
                                st.markdown(f"### üåê –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {target_lang_name}")
                                st.markdown('<div class="translated-container">', unsafe_allow_html=True)
                                st.text_area("–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", translated_text, height=200, key="translated_text", label_visibility="collapsed")
                                st.markdown('</div>', unsafe_allow_html=True)
                            
                            # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                            st.markdown("### üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞")
                            
                            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—Å—Ç–∞
                            text_stats = analyze_text(original_text)
                            
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫—Ä–∞—Å–∏–≤–æ–º –≤–∏–¥–µ
                            col_stats1, col_stats2, col_stats3 = st.columns(3)
                            
                            with col_stats1:
                                st.markdown('<div class="card">', unsafe_allow_html=True)
                                st.subheader("üìù –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                                st.metric("–°–∏–º–≤–æ–ª–æ–≤", text_stats["chars_count"])
                                st.metric("–°–ª–æ–≤", text_stats["words_count"])
                                st.metric("–°—Ç—Ä–æ–∫", text_stats["lines_count"])
                                st.metric("–ê–±–∑–∞—Ü–µ–≤", text_stats["paragraphs_count"])
                                st.markdown('</div>', unsafe_allow_html=True)
                            
                            with col_stats2:
                                st.markdown('<div class="card">', unsafe_allow_html=True)
                                st.subheader("üî§ –°–æ—Å—Ç–∞–≤ —Ç–µ–∫—Å—Ç–∞")
                                st.metric("–ë—É–∫–≤", text_stats["letters_count"])
                                st.metric("–¶–∏—Ñ—Ä", text_stats["digits_count"])
                                st.metric("–ü—Ä–æ–±–µ–ª–æ–≤", text_stats["spaces_count"])
                                st.metric("–ó–Ω–∞–∫–æ–≤ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏", text_stats["punctuation_count"])
                                st.markdown('</div>', unsafe_allow_html=True)
                            
                            with col_stats3:
                                st.markdown('<div class="card">', unsafe_allow_html=True)
                                st.subheader("üìö –ß–∞—Å—Ç–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
                                if text_stats["common_words"]:
                                    for word, count in text_stats["common_words"]:
                                        st.metric(f'"{word}"', count)
                                else:
                                    st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                                st.markdown('</div>', unsafe_allow_html=True)
                            
                            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                            if text_stats["chars_count"] > 0:
                                st.markdown("### üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–∞–≤–∞ —Ç–µ–∫—Å—Ç–∞")
                                
                                # –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
                                chart_data = {
                                    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': ['–ë—É–∫–≤—ã', '–¶–∏—Ñ—Ä—ã', '–ü—Ä–æ–±–µ–ª—ã', '–ó–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏'],
                                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': [
                                        text_stats["letters_count"], 
                                        text_stats["digits_count"], 
                                        text_stats["spaces_count"], 
                                        text_stats["punctuation_count"]
                                    ]
                                }
                                chart_df = pd.DataFrame(chart_data)
                                
                                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
                                st.bar_chart(chart_df.set_index('–ö–∞—Ç–µ–≥–æ—Ä–∏—è'))
                            
                            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                            st.divider()
                            col1, col2 = st.columns(2)
                            
                            # –≠–∫—Å–ø–æ—Ä—Ç –≤ TXT
                            if col1.button("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ TXT", use_container_width=True):
                                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥, –≤–∫–ª—é—á–∞–µ–º –æ–±–∞ —Ç–µ–∫—Å—Ç–∞
                                export_content = original_text
                                if translated_text:
                                    export_content += f"\n\n–ü–ï–†–ï–í–û–î:\n{translated_text}"
                                    
                                export_file = export_to_txt(export_content)
                                with open(export_file, "rb") as file:
                                    col1.download_button(
                                        label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å TXT",
                                        data=file,
                                        file_name=export_file,
                                        mime="text/plain",
                                        use_container_width=True
                                    )
                            
                            # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                            if col2.button("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", use_container_width=True):
                                st.toast("üìã –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")
                        else:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        with col_preview:
            if uploaded_file is not None:
                if uploaded_file.type.startswith('image/'):
                    st.markdown("### üñºÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
                    st.markdown('<div class="preview-container">', unsafe_allow_html=True)
                    st.image(file_data, caption=uploaded_file.name, use_container_width=True, output_format="JPEG")
                    st.markdown('</div>', unsafe_allow_html=True)
                elif uploaded_file.type == 'application/pdf':
                    st.info("üìë –ó–∞–≥—Ä—É–∂–µ–Ω PDF-—Ñ–∞–π–ª. –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                    st.markdown(f"**–ò–º—è —Ñ–∞–π–ª–∞:** {uploaded_file.name}")
                    st.markdown(f"**–†–∞–∑–º–µ—Ä:** {round(len(file_data) / 1024, 2)} –ö–ë")
    
    # –í–∫–ª–∞–¥–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    with tab2:
        st.subheader("üìú –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", use_container_width=True):
            st.cache_data.clear()
            st.rerun()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history = load_history()
        
        if not history:
            st.info("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –†–∞—Å–ø–æ–∑–Ω–∞–π—Ç–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é.")
        else:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–µ–∫
            for i, item in enumerate(history):
                with st.expander(f"üìù **{item.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}** | {item.get('language', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"):
                    display_translation_result(item, i)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
def display_translation_result(item, i):
    col1, col2 = st.columns([3, 1])
    
    with col1:
        st.markdown("#### üìÑ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")
        st.markdown('<div class="result-container">', unsafe_allow_html=True)
        st.text_area("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç", item.get('text', ''), height=150, key=f"hist_text_{i}", label_visibility="collapsed")
        st.markdown('</div>', unsafe_allow_html=True)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if 'translated_text' in item:
            target_lang = item.get('target_language', '')
            target_lang_name = TRANSLATION_LANGUAGES.get(target_lang, target_lang)
            st.markdown(f"#### üåê –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {target_lang_name}")
            st.markdown('<div class="translated-container">', unsafe_allow_html=True)
            st.text_area("–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", item.get('translated_text', ''), height=150, key=f"hist_trans_{i}", label_visibility="collapsed")
            st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.caption(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {item.get('processing_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        st.caption(f"üî§ –Ø–∑—ã–∫: {item.get('language', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
        if 'image_path' in item:
            try:
                with open(item['image_path'], 'rb') as img_file:
                    st.image(img_file.read(), caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True, output_format="JPEG")
            except Exception:
                st.warning("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        elif 'pdf_path' in item:
            st.info("PDF —Ñ–∞–π–ª")
            
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞
        col_btn1, col_btn2 = st.columns(2)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        if col_btn1.button("üìÑ –≠–∫—Å–ø–æ—Ä—Ç", key=f"export_btn_{i}", use_container_width=True):
            export_content = item.get('text', '')
            if 'translated_text' in item:
                export_content += f"\n\n–ü–ï–†–ï–í–û–î:\n{item.get('translated_text', '')}"
                
            export_file = export_to_txt(export_content)
            with open(export_file, "rb") as file:
                col_btn1.download_button(
                    label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å TXT",
                    data=file,
                    file_name=export_file,
                    mime="text/plain",
                    key=f"download_btn_{i}",
                    use_container_width=True
                )
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞
        show_stats_key = f"show_stats_{i}"
        if show_stats_key not in st.session_state:
            st.session_state[show_stats_key] = False
            
        if col_btn2.button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", key=f"stats_btn_{i}", use_container_width=True):
            st.session_state[show_stats_key] = not st.session_state[show_stats_key]
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥ –∫–æ–ª–æ–Ω–∫–∞–º–∏, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ
    if show_stats_key in st.session_state and st.session_state[show_stats_key]:
        text = item.get('text', '')
        st.markdown("---")
        st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞")
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—Å—Ç–∞
        text_stats = analyze_text(text)
        
        cols_stat = st.columns(3)
        with cols_stat[0]:
            st.markdown("##### üìù –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            st.markdown(f"""
            * **–°–∏–º–≤–æ–ª–æ–≤:** {text_stats["chars_count"]}
            * **–°–ª–æ–≤:** {text_stats["words_count"]}
            * **–°—Ç—Ä–æ–∫:** {text_stats["lines_count"]}
            * **–ê–±–∑–∞—Ü–µ–≤:** {text_stats["paragraphs_count"]}
            """)
        
        with cols_stat[1]:
            st.markdown("##### üî§ –°–æ—Å—Ç–∞–≤ —Ç–µ–∫—Å—Ç–∞")
            st.markdown(f"""
            * **–ë—É–∫–≤:** {text_stats["letters_count"]}
            * **–¶–∏—Ñ—Ä:** {text_stats["digits_count"]}
            * **–ü—Ä–æ–±–µ–ª–æ–≤:** {text_stats["spaces_count"]}
            * **–ó–Ω–∞–∫–æ–≤ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏:** {text_stats["punctuation_count"]}
            """)
        
        with cols_stat[2]:
            st.markdown("##### üìö –ß–∞—Å—Ç—ã–µ —Å–ª–æ–≤–∞")
            if text_stats["common_words"]:
                for word, count in text_stats["common_words"]:
                    st.markdown(f"* **{word}**: {count}")
            else:
                st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

if __name__ == "__main__":
    main() 